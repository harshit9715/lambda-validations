"use strict";module.exports = validate20;module.exports.default = validate20;const schema22 = {"properties":{"body":{"type":"object","properties":{"primaryID":{"type":"string"}},"additionalProperties":false,"required":["primaryID"]},"query":{"type":"object","properties":{"name":{"type":"string"}},"additionalProperties":false,"required":["name"]},"path":{}},"additionalProperties":false,"required":["body"],"type":"object"};function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.body === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "body"},message:"must have required property '"+"body"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}for(const key0 in data){if(!(((key0 === "body") || (key0 === "query")) || (key0 === "path"))){const err1 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}if(data.body !== undefined){let data0 = data.body;if(data0 && typeof data0 == "object" && !Array.isArray(data0)){if(data0.primaryID === undefined){const err2 = {instancePath:instancePath+"/body",schemaPath:"#/properties/body/required",keyword:"required",params:{missingProperty: "primaryID"},message:"must have required property '"+"primaryID"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}for(const key1 in data0){if(!(key1 === "primaryID")){const err3 = {instancePath:instancePath+"/body",schemaPath:"#/properties/body/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}if(data0.primaryID !== undefined){let data1 = data0.primaryID;if(typeof data1 !== "string"){let dataType0 = typeof data1;let coerced0 = undefined;if(dataType0 == 'object' && Array.isArray(data1) && data1.length == 1){data1 = data1[0];dataType0 = typeof data1;if(typeof data1 === "string"){coerced0 = data1;}}if(!(coerced0 !== undefined)){if(dataType0 == "number" || dataType0 == "boolean"){coerced0 = "" + data1;}else if(data1 === null){coerced0 = "";}else {const err4 = {instancePath:instancePath+"/body/primaryID",schemaPath:"#/properties/body/properties/primaryID/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}if(coerced0 !== undefined){data1 = coerced0;if(data0 !== undefined){data0["primaryID"] = coerced0;}}}}}else {const err5 = {instancePath:instancePath+"/body",schemaPath:"#/properties/body/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}if(data.query !== undefined){let data2 = data.query;if(data2 && typeof data2 == "object" && !Array.isArray(data2)){if(data2.name === undefined){const err6 = {instancePath:instancePath+"/query",schemaPath:"#/properties/query/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}for(const key2 in data2){if(!(key2 === "name")){const err7 = {instancePath:instancePath+"/query",schemaPath:"#/properties/query/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}if(data2.name !== undefined){let data3 = data2.name;if(typeof data3 !== "string"){let dataType1 = typeof data3;let coerced1 = undefined;if(dataType1 == 'object' && Array.isArray(data3) && data3.length == 1){data3 = data3[0];dataType1 = typeof data3;if(typeof data3 === "string"){coerced1 = data3;}}if(!(coerced1 !== undefined)){if(dataType1 == "number" || dataType1 == "boolean"){coerced1 = "" + data3;}else if(data3 === null){coerced1 = "";}else {const err8 = {instancePath:instancePath+"/query/name",schemaPath:"#/properties/query/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}if(coerced1 !== undefined){data3 = coerced1;if(data2 !== undefined){data2["name"] = coerced1;}}}}}else {const err9 = {instancePath:instancePath+"/query",schemaPath:"#/properties/query/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}}else {const err10 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}validate20.errors = vErrors;return errors === 0;}